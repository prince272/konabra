basePath: /
definitions:
  models.IncidentSeverity:
    enum:
    - low
    - medium
    - high
    - critical
    type: string
    x-enum-varnames:
    - SeverityLow
    - SeverityMedium
    - SeverityHigh
    - SeverityCritical
  models.IncidentStatus:
    enum:
    - pending
    - investigating
    - resolved
    - falseAlarm
    type: string
    x-enum-varnames:
    - StatusPending
    - StatusInvestigating
    - StatusResolved
    - StatusFalseAlarm
  services.ChangeAccountForm:
    properties:
      newUsername:
        maxLength: 256
        type: string
    required:
    - newUsername
    type: object
  services.ChangePasswordForm:
    properties:
      newPassword:
        type: string
      oldPassword:
        type: string
    required:
    - newPassword
    - oldPassword
    type: object
  services.CompleteChangeAccountForm:
    properties:
      code:
        type: string
      newUsername:
        maxLength: 256
        type: string
    required:
    - code
    - newUsername
    type: object
  services.CompleteResetPasswordForm:
    properties:
      code:
        type: string
      newPassword:
        type: string
      username:
        maxLength: 256
        type: string
      validateOnly:
        type: boolean
    required:
    - code
    - newPassword
    - username
    type: object
  services.CompleteVerifyAccountForm:
    properties:
      code:
        type: string
      username:
        maxLength: 256
        type: string
    required:
    - code
    - username
    type: object
  services.CreateAccountForm:
    properties:
      firstName:
        maxLength: 256
        type: string
      lastName:
        maxLength: 256
        type: string
      password:
        type: string
      username:
        maxLength: 256
        type: string
      validateOnly:
        type: boolean
    required:
    - firstName
    - lastName
    - password
    - username
    type: object
  services.CreateCategoryForm:
    properties:
      description:
        maxLength: 1024
        type: string
      name:
        maxLength: 512
        type: string
    required:
    - name
    type: object
  services.CreateIncidentForm:
    properties:
      categoryId:
        type: string
      description:
        maxLength: 1024
        type: string
      latitude:
        type: number
      location:
        type: string
      longitude:
        type: number
      severity:
        $ref: '#/definitions/models.IncidentSeverity'
      status:
        $ref: '#/definitions/models.IncidentStatus'
      title:
        maxLength: 256
        type: string
    required:
    - categoryId
    - severity
    - status
    - title
    type: object
  services.CreateRoleForm:
    properties:
      description:
        maxLength: 1024
        type: string
      name:
        maxLength: 256
        type: string
    required:
    - name
    type: object
  services.ResetPasswordForm:
    properties:
      username:
        maxLength: 256
        type: string
    required:
    - username
    type: object
  services.SignInForm:
    properties:
      password:
        type: string
      username:
        maxLength: 256
        type: string
    required:
    - password
    - username
    type: object
  services.SignInWithRefreshTokenForm:
    properties:
      refreshToken:
        type: string
    required:
    - refreshToken
    type: object
  services.SignOutForm:
    properties:
      global:
        type: boolean
      refreshToken:
        type: string
    required:
    - refreshToken
    type: object
  services.UpdateCategoryForm:
    properties:
      description:
        maxLength: 1024
        type: string
      name:
        maxLength: 512
        type: string
    required:
    - name
    type: object
  services.UpdateIncidentForm:
    properties:
      categoryId:
        type: string
      description:
        maxLength: 1024
        type: string
      latitude:
        type: number
      location:
        type: string
      longitude:
        type: number
      severity:
        $ref: '#/definitions/models.IncidentSeverity'
      status:
        $ref: '#/definitions/models.IncidentStatus'
      title:
        maxLength: 256
        type: string
    required:
    - categoryId
    - severity
    - status
    - title
    type: object
  services.UpdateRoleForm:
    properties:
      description:
        maxLength: 1024
        type: string
      name:
        maxLength: 256
        type: string
    required:
    - name
    type: object
  services.VerifyAccountForm:
    properties:
      username:
        maxLength: 256
        type: string
    required:
    - username
    type: object
info:
  contact: {}
  description: Konabra is a smart, community-powered transport and road safety platform
    for Ghana. This API supports live incident reporting, road condition updates,
    and data analytics integration.
  title: Konabra API
  version: "1.0"
paths:
  /account/change:
    post:
      consumes:
      - application/json
      parameters:
      - description: Account change details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.ChangeAccountForm'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Send account change verification code (email or phone)
      tags:
      - Account
  /account/change/complete:
    post:
      consumes:
      - application/json
      parameters:
      - description: Account change completion details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.CompleteChangeAccountForm'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Complete account change (email or phone)
      tags:
      - Account
  /account/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: Account creation details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.CreateAccountForm'
      produces:
      - application/json
      responses: {}
      summary: Create a new user account
      tags:
      - Account
  /account/current:
    delete:
      consumes:
      - application/json
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Delete the current user account
      tags:
      - Account
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get current user account
      tags:
      - Account
  /account/password/change:
    post:
      consumes:
      - application/json
      parameters:
      - description: Password change details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.ChangePasswordForm'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Change the current password
      tags:
      - Account
  /account/password/reset:
    post:
      consumes:
      - application/json
      parameters:
      - description: Password reset details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.ResetPasswordForm'
      produces:
      - application/json
      responses: {}
      summary: Send password reset code
      tags:
      - Account
  /account/password/reset/complete:
    post:
      consumes:
      - application/json
      parameters:
      - description: Password reset completion details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.CompleteResetPasswordForm'
      produces:
      - application/json
      responses: {}
      summary: Complete password reset
      tags:
      - Account
  /account/signin:
    post:
      consumes:
      - application/json
      parameters:
      - description: Sign-in credentials
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.SignInForm'
      produces:
      - application/json
      responses: {}
      summary: Sign in to an existing account
      tags:
      - Account
  /account/signin/refresh:
    post:
      consumes:
      - application/json
      parameters:
      - description: Refresh token details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.SignInWithRefreshTokenForm'
      produces:
      - application/json
      responses: {}
      summary: Sign in using a refresh token
      tags:
      - Account
  /account/signout:
    post:
      consumes:
      - application/json
      parameters:
      - description: Sign-out request details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.SignOutForm'
      produces:
      - application/json
      responses: {}
      summary: Sign out of the current account
      tags:
      - Account
  /account/verify:
    post:
      consumes:
      - application/json
      parameters:
      - description: Verification details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.VerifyAccountForm'
      produces:
      - application/json
      responses: {}
      summary: Send account verification code (email or phone)
      tags:
      - Account
  /account/verify/complete:
    post:
      consumes:
      - application/json
      parameters:
      - description: Verification completion details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.CompleteVerifyAccountForm'
      produces:
      - application/json
      responses: {}
      summary: Complete account verification (email or phone)
      tags:
      - Account
  /categories:
    get:
      consumes:
      - application/json
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
      - description: '"asc" or "desc"'
        in: query
        name: order
        type: string
      - in: query
        name: search
        type: string
      - in: query
        name: sort
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get paginated categories
      tags:
      - Categories
    post:
      consumes:
      - application/json
      parameters:
      - description: Category creation form
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.CreateCategoryForm'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Create a new category
      tags:
      - Categories
  /categories/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Category Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Delete a category by Id
      tags:
      - Categories
    get:
      consumes:
      - application/json
      parameters:
      - description: Category Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get category by Id
      tags:
      - Categories
    put:
      consumes:
      - application/json
      parameters:
      - description: Category Id
        in: path
        name: id
        required: true
        type: string
      - description: Category update form
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.UpdateCategoryForm'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Update an existing category
      tags:
      - Categories
  /categories/all:
    get:
      consumes:
      - application/json
      parameters:
      - description: '"asc" or "desc"'
        in: query
        name: order
        type: string
      - in: query
        name: search
        type: string
      - in: query
        name: sort
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get all categories
      tags:
      - Categories
  /incidents:
    get:
      consumes:
      - application/json
      parameters:
      - in: query
        name: endDate
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
      - description: asc or desc
        in: query
        name: order
        type: string
      - in: query
        name: search
        type: string
      - enum:
        - low
        - medium
        - high
        - critical
        in: query
        name: severity
        type: string
        x-enum-varnames:
        - SeverityLow
        - SeverityMedium
        - SeverityHigh
        - SeverityCritical
      - in: query
        name: sort
        type: string
      - in: query
        name: startDate
        type: string
      - enum:
        - pending
        - investigating
        - resolved
        - falseAlarm
        in: query
        name: status
        type: string
        x-enum-varnames:
        - StatusPending
        - StatusInvestigating
        - StatusResolved
        - StatusFalseAlarm
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get paginated incidents
      tags:
      - Incidents
    post:
      consumes:
      - application/json
      parameters:
      - description: Incident creation form
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.CreateIncidentForm'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Create a new incident
      tags:
      - Incidents
  /incidents/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Incident Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Delete an incident by Id
      tags:
      - Incidents
    get:
      consumes:
      - application/json
      parameters:
      - description: Incident Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get incident by Id
      tags:
      - Incidents
    put:
      consumes:
      - application/json
      parameters:
      - description: Incident Id
        in: path
        name: id
        required: true
        type: string
      - description: Incident update form
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.UpdateIncidentForm'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Update an existing incident
      tags:
      - Incidents
  /roles:
    get:
      consumes:
      - application/json
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
      - description: '"asc" or "desc"'
        in: query
        name: order
        type: string
      - in: query
        name: search
        type: string
      - in: query
        name: sort
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get paginated roles
      tags:
      - Roles
    post:
      consumes:
      - application/json
      parameters:
      - description: Role creation form
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.CreateRoleForm'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Create a new role
      tags:
      - Roles
  /roles/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Role Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Delete a role by Id
      tags:
      - Roles
    get:
      consumes:
      - application/json
      parameters:
      - description: Role Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get a role by Id
      tags:
      - Roles
    put:
      consumes:
      - application/json
      parameters:
      - description: Role Id
        in: path
        name: id
        required: true
        type: string
      - description: Role update form
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.UpdateRoleForm'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Update an existing role
      tags:
      - Roles
  /roles/all:
    get:
      consumes:
      - application/json
      parameters:
      - description: '"asc" or "desc"'
        in: query
        name: order
        type: string
      - in: query
        name: search
        type: string
      - in: query
        name: sort
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get all roles
      tags:
      - Roles
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
